// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: todo_item.proto

#include "todo_item.pb.h"
#include "todo_item.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace todo_item {

static const char* TodoItemService_method_names[] = {
  "/todo_item.TodoItemService/GetTodoItems",
  "/todo_item.TodoItemService/CreateTodoItem",
  "/todo_item.TodoItemService/UpdateTodoItem",
  "/todo_item.TodoItemService/DeleteTodoItem",
};

std::unique_ptr< TodoItemService::Stub> TodoItemService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TodoItemService::Stub> stub(new TodoItemService::Stub(channel, options));
  return stub;
}

TodoItemService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetTodoItems_(TodoItemService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateTodoItem_(TodoItemService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateTodoItem_(TodoItemService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteTodoItem_(TodoItemService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TodoItemService::Stub::GetTodoItems(::grpc::ClientContext* context, const ::todo_item::GetTodoItemsRequest& request, ::todo_item::GetTodoItemsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::todo_item::GetTodoItemsRequest, ::todo_item::GetTodoItemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTodoItems_, context, request, response);
}

void TodoItemService::Stub::async::GetTodoItems(::grpc::ClientContext* context, const ::todo_item::GetTodoItemsRequest* request, ::todo_item::GetTodoItemsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::todo_item::GetTodoItemsRequest, ::todo_item::GetTodoItemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTodoItems_, context, request, response, std::move(f));
}

void TodoItemService::Stub::async::GetTodoItems(::grpc::ClientContext* context, const ::todo_item::GetTodoItemsRequest* request, ::todo_item::GetTodoItemsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTodoItems_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo_item::GetTodoItemsResponse>* TodoItemService::Stub::PrepareAsyncGetTodoItemsRaw(::grpc::ClientContext* context, const ::todo_item::GetTodoItemsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::todo_item::GetTodoItemsResponse, ::todo_item::GetTodoItemsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTodoItems_, context, request);
}

::grpc::ClientAsyncResponseReader< ::todo_item::GetTodoItemsResponse>* TodoItemService::Stub::AsyncGetTodoItemsRaw(::grpc::ClientContext* context, const ::todo_item::GetTodoItemsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTodoItemsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TodoItemService::Stub::CreateTodoItem(::grpc::ClientContext* context, const ::todo_item::CreateTodoItemRequest& request, ::todo_item::CreateTodoItemResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::todo_item::CreateTodoItemRequest, ::todo_item::CreateTodoItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateTodoItem_, context, request, response);
}

void TodoItemService::Stub::async::CreateTodoItem(::grpc::ClientContext* context, const ::todo_item::CreateTodoItemRequest* request, ::todo_item::CreateTodoItemResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::todo_item::CreateTodoItemRequest, ::todo_item::CreateTodoItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTodoItem_, context, request, response, std::move(f));
}

void TodoItemService::Stub::async::CreateTodoItem(::grpc::ClientContext* context, const ::todo_item::CreateTodoItemRequest* request, ::todo_item::CreateTodoItemResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTodoItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo_item::CreateTodoItemResponse>* TodoItemService::Stub::PrepareAsyncCreateTodoItemRaw(::grpc::ClientContext* context, const ::todo_item::CreateTodoItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::todo_item::CreateTodoItemResponse, ::todo_item::CreateTodoItemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateTodoItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::todo_item::CreateTodoItemResponse>* TodoItemService::Stub::AsyncCreateTodoItemRaw(::grpc::ClientContext* context, const ::todo_item::CreateTodoItemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateTodoItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TodoItemService::Stub::UpdateTodoItem(::grpc::ClientContext* context, const ::todo_item::UpdateTodoItemRequest& request, ::todo_item::UpdateTodoItemResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::todo_item::UpdateTodoItemRequest, ::todo_item::UpdateTodoItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateTodoItem_, context, request, response);
}

void TodoItemService::Stub::async::UpdateTodoItem(::grpc::ClientContext* context, const ::todo_item::UpdateTodoItemRequest* request, ::todo_item::UpdateTodoItemResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::todo_item::UpdateTodoItemRequest, ::todo_item::UpdateTodoItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateTodoItem_, context, request, response, std::move(f));
}

void TodoItemService::Stub::async::UpdateTodoItem(::grpc::ClientContext* context, const ::todo_item::UpdateTodoItemRequest* request, ::todo_item::UpdateTodoItemResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateTodoItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo_item::UpdateTodoItemResponse>* TodoItemService::Stub::PrepareAsyncUpdateTodoItemRaw(::grpc::ClientContext* context, const ::todo_item::UpdateTodoItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::todo_item::UpdateTodoItemResponse, ::todo_item::UpdateTodoItemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateTodoItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::todo_item::UpdateTodoItemResponse>* TodoItemService::Stub::AsyncUpdateTodoItemRaw(::grpc::ClientContext* context, const ::todo_item::UpdateTodoItemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateTodoItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TodoItemService::Stub::DeleteTodoItem(::grpc::ClientContext* context, const ::todo_item::DeleteTodoItemRequest& request, ::todo_item::DeleteTodoItemResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::todo_item::DeleteTodoItemRequest, ::todo_item::DeleteTodoItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteTodoItem_, context, request, response);
}

void TodoItemService::Stub::async::DeleteTodoItem(::grpc::ClientContext* context, const ::todo_item::DeleteTodoItemRequest* request, ::todo_item::DeleteTodoItemResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::todo_item::DeleteTodoItemRequest, ::todo_item::DeleteTodoItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteTodoItem_, context, request, response, std::move(f));
}

void TodoItemService::Stub::async::DeleteTodoItem(::grpc::ClientContext* context, const ::todo_item::DeleteTodoItemRequest* request, ::todo_item::DeleteTodoItemResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteTodoItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo_item::DeleteTodoItemResponse>* TodoItemService::Stub::PrepareAsyncDeleteTodoItemRaw(::grpc::ClientContext* context, const ::todo_item::DeleteTodoItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::todo_item::DeleteTodoItemResponse, ::todo_item::DeleteTodoItemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteTodoItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::todo_item::DeleteTodoItemResponse>* TodoItemService::Stub::AsyncDeleteTodoItemRaw(::grpc::ClientContext* context, const ::todo_item::DeleteTodoItemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteTodoItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

TodoItemService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TodoItemService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TodoItemService::Service, ::todo_item::GetTodoItemsRequest, ::todo_item::GetTodoItemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TodoItemService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::todo_item::GetTodoItemsRequest* req,
             ::todo_item::GetTodoItemsResponse* resp) {
               return service->GetTodoItems(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TodoItemService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TodoItemService::Service, ::todo_item::CreateTodoItemRequest, ::todo_item::CreateTodoItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TodoItemService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::todo_item::CreateTodoItemRequest* req,
             ::todo_item::CreateTodoItemResponse* resp) {
               return service->CreateTodoItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TodoItemService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TodoItemService::Service, ::todo_item::UpdateTodoItemRequest, ::todo_item::UpdateTodoItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TodoItemService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::todo_item::UpdateTodoItemRequest* req,
             ::todo_item::UpdateTodoItemResponse* resp) {
               return service->UpdateTodoItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TodoItemService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TodoItemService::Service, ::todo_item::DeleteTodoItemRequest, ::todo_item::DeleteTodoItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TodoItemService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::todo_item::DeleteTodoItemRequest* req,
             ::todo_item::DeleteTodoItemResponse* resp) {
               return service->DeleteTodoItem(ctx, req, resp);
             }, this)));
}

TodoItemService::Service::~Service() {
}

::grpc::Status TodoItemService::Service::GetTodoItems(::grpc::ServerContext* context, const ::todo_item::GetTodoItemsRequest* request, ::todo_item::GetTodoItemsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TodoItemService::Service::CreateTodoItem(::grpc::ServerContext* context, const ::todo_item::CreateTodoItemRequest* request, ::todo_item::CreateTodoItemResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TodoItemService::Service::UpdateTodoItem(::grpc::ServerContext* context, const ::todo_item::UpdateTodoItemRequest* request, ::todo_item::UpdateTodoItemResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TodoItemService::Service::DeleteTodoItem(::grpc::ServerContext* context, const ::todo_item::DeleteTodoItemRequest* request, ::todo_item::DeleteTodoItemResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace todo_item

