// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: todo_list.proto

#include "todo_list.pb.h"
#include "todo_list.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace todo_list {

static const char* TodoListService_method_names[] = {
  "/todo_list.TodoListService/AddTodoList",
  "/todo_list.TodoListService/UpdateTodoList",
  "/todo_list.TodoListService/GetTodoList",
  "/todo_list.TodoListService/DeleteTodoList",
};

std::unique_ptr< TodoListService::Stub> TodoListService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TodoListService::Stub> stub(new TodoListService::Stub(channel, options));
  return stub;
}

TodoListService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AddTodoList_(TodoListService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateTodoList_(TodoListService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTodoList_(TodoListService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteTodoList_(TodoListService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TodoListService::Stub::AddTodoList(::grpc::ClientContext* context, const ::todo_list::AddTodoRequest& request, ::todo_list::AddTodoListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::todo_list::AddTodoRequest, ::todo_list::AddTodoListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddTodoList_, context, request, response);
}

void TodoListService::Stub::async::AddTodoList(::grpc::ClientContext* context, const ::todo_list::AddTodoRequest* request, ::todo_list::AddTodoListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::todo_list::AddTodoRequest, ::todo_list::AddTodoListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddTodoList_, context, request, response, std::move(f));
}

void TodoListService::Stub::async::AddTodoList(::grpc::ClientContext* context, const ::todo_list::AddTodoRequest* request, ::todo_list::AddTodoListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddTodoList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo_list::AddTodoListResponse>* TodoListService::Stub::PrepareAsyncAddTodoListRaw(::grpc::ClientContext* context, const ::todo_list::AddTodoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::todo_list::AddTodoListResponse, ::todo_list::AddTodoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddTodoList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::todo_list::AddTodoListResponse>* TodoListService::Stub::AsyncAddTodoListRaw(::grpc::ClientContext* context, const ::todo_list::AddTodoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddTodoListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TodoListService::Stub::UpdateTodoList(::grpc::ClientContext* context, const ::todo_list::UpdateTodoRequest& request, ::todo_list::UpdateTodoListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::todo_list::UpdateTodoRequest, ::todo_list::UpdateTodoListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateTodoList_, context, request, response);
}

void TodoListService::Stub::async::UpdateTodoList(::grpc::ClientContext* context, const ::todo_list::UpdateTodoRequest* request, ::todo_list::UpdateTodoListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::todo_list::UpdateTodoRequest, ::todo_list::UpdateTodoListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateTodoList_, context, request, response, std::move(f));
}

void TodoListService::Stub::async::UpdateTodoList(::grpc::ClientContext* context, const ::todo_list::UpdateTodoRequest* request, ::todo_list::UpdateTodoListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateTodoList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo_list::UpdateTodoListResponse>* TodoListService::Stub::PrepareAsyncUpdateTodoListRaw(::grpc::ClientContext* context, const ::todo_list::UpdateTodoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::todo_list::UpdateTodoListResponse, ::todo_list::UpdateTodoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateTodoList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::todo_list::UpdateTodoListResponse>* TodoListService::Stub::AsyncUpdateTodoListRaw(::grpc::ClientContext* context, const ::todo_list::UpdateTodoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateTodoListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TodoListService::Stub::GetTodoList(::grpc::ClientContext* context, const ::todo_list::GetTodoListRequest& request, ::todo_list::GetTodoListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::todo_list::GetTodoListRequest, ::todo_list::GetTodoListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTodoList_, context, request, response);
}

void TodoListService::Stub::async::GetTodoList(::grpc::ClientContext* context, const ::todo_list::GetTodoListRequest* request, ::todo_list::GetTodoListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::todo_list::GetTodoListRequest, ::todo_list::GetTodoListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTodoList_, context, request, response, std::move(f));
}

void TodoListService::Stub::async::GetTodoList(::grpc::ClientContext* context, const ::todo_list::GetTodoListRequest* request, ::todo_list::GetTodoListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTodoList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo_list::GetTodoListResponse>* TodoListService::Stub::PrepareAsyncGetTodoListRaw(::grpc::ClientContext* context, const ::todo_list::GetTodoListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::todo_list::GetTodoListResponse, ::todo_list::GetTodoListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTodoList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::todo_list::GetTodoListResponse>* TodoListService::Stub::AsyncGetTodoListRaw(::grpc::ClientContext* context, const ::todo_list::GetTodoListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTodoListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TodoListService::Stub::DeleteTodoList(::grpc::ClientContext* context, const ::todo_list::DeleteTodoRequest& request, ::todo_list::DeleteTodoListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::todo_list::DeleteTodoRequest, ::todo_list::DeleteTodoListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteTodoList_, context, request, response);
}

void TodoListService::Stub::async::DeleteTodoList(::grpc::ClientContext* context, const ::todo_list::DeleteTodoRequest* request, ::todo_list::DeleteTodoListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::todo_list::DeleteTodoRequest, ::todo_list::DeleteTodoListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteTodoList_, context, request, response, std::move(f));
}

void TodoListService::Stub::async::DeleteTodoList(::grpc::ClientContext* context, const ::todo_list::DeleteTodoRequest* request, ::todo_list::DeleteTodoListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteTodoList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo_list::DeleteTodoListResponse>* TodoListService::Stub::PrepareAsyncDeleteTodoListRaw(::grpc::ClientContext* context, const ::todo_list::DeleteTodoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::todo_list::DeleteTodoListResponse, ::todo_list::DeleteTodoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteTodoList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::todo_list::DeleteTodoListResponse>* TodoListService::Stub::AsyncDeleteTodoListRaw(::grpc::ClientContext* context, const ::todo_list::DeleteTodoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteTodoListRaw(context, request, cq);
  result->StartCall();
  return result;
}

TodoListService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TodoListService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TodoListService::Service, ::todo_list::AddTodoRequest, ::todo_list::AddTodoListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TodoListService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::todo_list::AddTodoRequest* req,
             ::todo_list::AddTodoListResponse* resp) {
               return service->AddTodoList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TodoListService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TodoListService::Service, ::todo_list::UpdateTodoRequest, ::todo_list::UpdateTodoListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TodoListService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::todo_list::UpdateTodoRequest* req,
             ::todo_list::UpdateTodoListResponse* resp) {
               return service->UpdateTodoList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TodoListService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TodoListService::Service, ::todo_list::GetTodoListRequest, ::todo_list::GetTodoListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TodoListService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::todo_list::GetTodoListRequest* req,
             ::todo_list::GetTodoListResponse* resp) {
               return service->GetTodoList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TodoListService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TodoListService::Service, ::todo_list::DeleteTodoRequest, ::todo_list::DeleteTodoListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TodoListService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::todo_list::DeleteTodoRequest* req,
             ::todo_list::DeleteTodoListResponse* resp) {
               return service->DeleteTodoList(ctx, req, resp);
             }, this)));
}

TodoListService::Service::~Service() {
}

::grpc::Status TodoListService::Service::AddTodoList(::grpc::ServerContext* context, const ::todo_list::AddTodoRequest* request, ::todo_list::AddTodoListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TodoListService::Service::UpdateTodoList(::grpc::ServerContext* context, const ::todo_list::UpdateTodoRequest* request, ::todo_list::UpdateTodoListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TodoListService::Service::GetTodoList(::grpc::ServerContext* context, const ::todo_list::GetTodoListRequest* request, ::todo_list::GetTodoListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TodoListService::Service::DeleteTodoList(::grpc::ServerContext* context, const ::todo_list::DeleteTodoRequest* request, ::todo_list::DeleteTodoListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace todo_list

