// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: todo_list.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_todo_5flist_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_todo_5flist_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_todo_5flist_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_todo_5flist_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_todo_5flist_2eproto;
namespace todo_list {
class AddTodoListResponse;
struct AddTodoListResponseDefaultTypeInternal;
extern AddTodoListResponseDefaultTypeInternal _AddTodoListResponse_default_instance_;
class AddTodoRequest;
struct AddTodoRequestDefaultTypeInternal;
extern AddTodoRequestDefaultTypeInternal _AddTodoRequest_default_instance_;
class DeleteTodoListResponse;
struct DeleteTodoListResponseDefaultTypeInternal;
extern DeleteTodoListResponseDefaultTypeInternal _DeleteTodoListResponse_default_instance_;
class DeleteTodoRequest;
struct DeleteTodoRequestDefaultTypeInternal;
extern DeleteTodoRequestDefaultTypeInternal _DeleteTodoRequest_default_instance_;
class GetTodoListRequest;
struct GetTodoListRequestDefaultTypeInternal;
extern GetTodoListRequestDefaultTypeInternal _GetTodoListRequest_default_instance_;
class GetTodoListResponse;
struct GetTodoListResponseDefaultTypeInternal;
extern GetTodoListResponseDefaultTypeInternal _GetTodoListResponse_default_instance_;
class TodoItem;
struct TodoItemDefaultTypeInternal;
extern TodoItemDefaultTypeInternal _TodoItem_default_instance_;
class TodoList;
struct TodoListDefaultTypeInternal;
extern TodoListDefaultTypeInternal _TodoList_default_instance_;
class UpdateTodoListResponse;
struct UpdateTodoListResponseDefaultTypeInternal;
extern UpdateTodoListResponseDefaultTypeInternal _UpdateTodoListResponse_default_instance_;
class UpdateTodoRequest;
struct UpdateTodoRequestDefaultTypeInternal;
extern UpdateTodoRequestDefaultTypeInternal _UpdateTodoRequest_default_instance_;
}  // namespace todo_list
PROTOBUF_NAMESPACE_OPEN
template<> ::todo_list::AddTodoListResponse* Arena::CreateMaybeMessage<::todo_list::AddTodoListResponse>(Arena*);
template<> ::todo_list::AddTodoRequest* Arena::CreateMaybeMessage<::todo_list::AddTodoRequest>(Arena*);
template<> ::todo_list::DeleteTodoListResponse* Arena::CreateMaybeMessage<::todo_list::DeleteTodoListResponse>(Arena*);
template<> ::todo_list::DeleteTodoRequest* Arena::CreateMaybeMessage<::todo_list::DeleteTodoRequest>(Arena*);
template<> ::todo_list::GetTodoListRequest* Arena::CreateMaybeMessage<::todo_list::GetTodoListRequest>(Arena*);
template<> ::todo_list::GetTodoListResponse* Arena::CreateMaybeMessage<::todo_list::GetTodoListResponse>(Arena*);
template<> ::todo_list::TodoItem* Arena::CreateMaybeMessage<::todo_list::TodoItem>(Arena*);
template<> ::todo_list::TodoList* Arena::CreateMaybeMessage<::todo_list::TodoList>(Arena*);
template<> ::todo_list::UpdateTodoListResponse* Arena::CreateMaybeMessage<::todo_list::UpdateTodoListResponse>(Arena*);
template<> ::todo_list::UpdateTodoRequest* Arena::CreateMaybeMessage<::todo_list::UpdateTodoRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace todo_list {

// ===================================================================

class TodoItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:todo_list.TodoItem) */ {
 public:
  inline TodoItem() : TodoItem(nullptr) {}
  ~TodoItem() override;
  explicit PROTOBUF_CONSTEXPR TodoItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TodoItem(const TodoItem& from);
  TodoItem(TodoItem&& from) noexcept
    : TodoItem() {
    *this = ::std::move(from);
  }

  inline TodoItem& operator=(const TodoItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline TodoItem& operator=(TodoItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TodoItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const TodoItem* internal_default_instance() {
    return reinterpret_cast<const TodoItem*>(
               &_TodoItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TodoItem& a, TodoItem& b) {
    a.Swap(&b);
  }
  inline void Swap(TodoItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TodoItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TodoItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TodoItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TodoItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TodoItem& from) {
    TodoItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TodoItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "todo_list.TodoItem";
  }
  protected:
  explicit TodoItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kNoteFieldNumber = 3,
    kTodoListIdFieldNumber = 4,
    kCreatedDateFieldNumber = 6,
    kModifiedDateFieldNumber = 7,
    kCompletedFieldNumber = 5,
    kVersionFieldNumber = 8,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string note = 3;
  void clear_note();
  const std::string& note() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_note(ArgT0&& arg0, ArgT... args);
  std::string* mutable_note();
  PROTOBUF_NODISCARD std::string* release_note();
  void set_allocated_note(std::string* note);
  private:
  const std::string& _internal_note() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_note(const std::string& value);
  std::string* _internal_mutable_note();
  public:

  // string todo_list_id = 4;
  void clear_todo_list_id();
  const std::string& todo_list_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_todo_list_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_todo_list_id();
  PROTOBUF_NODISCARD std::string* release_todo_list_id();
  void set_allocated_todo_list_id(std::string* todo_list_id);
  private:
  const std::string& _internal_todo_list_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_todo_list_id(const std::string& value);
  std::string* _internal_mutable_todo_list_id();
  public:

  // string created_date = 6;
  void clear_created_date();
  const std::string& created_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_created_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_created_date();
  PROTOBUF_NODISCARD std::string* release_created_date();
  void set_allocated_created_date(std::string* created_date);
  private:
  const std::string& _internal_created_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_date(const std::string& value);
  std::string* _internal_mutable_created_date();
  public:

  // string modified_date = 7;
  void clear_modified_date();
  const std::string& modified_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_modified_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_modified_date();
  PROTOBUF_NODISCARD std::string* release_modified_date();
  void set_allocated_modified_date(std::string* modified_date);
  private:
  const std::string& _internal_modified_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modified_date(const std::string& value);
  std::string* _internal_mutable_modified_date();
  public:

  // bool completed = 5;
  void clear_completed();
  bool completed() const;
  void set_completed(bool value);
  private:
  bool _internal_completed() const;
  void _internal_set_completed(bool value);
  public:

  // int32 version = 8;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:todo_list.TodoItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr todo_list_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_date_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modified_date_;
    bool completed_;
    int32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_todo_5flist_2eproto;
};
// -------------------------------------------------------------------

class AddTodoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:todo_list.AddTodoRequest) */ {
 public:
  inline AddTodoRequest() : AddTodoRequest(nullptr) {}
  ~AddTodoRequest() override;
  explicit PROTOBUF_CONSTEXPR AddTodoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddTodoRequest(const AddTodoRequest& from);
  AddTodoRequest(AddTodoRequest&& from) noexcept
    : AddTodoRequest() {
    *this = ::std::move(from);
  }

  inline AddTodoRequest& operator=(const AddTodoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddTodoRequest& operator=(AddTodoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddTodoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddTodoRequest* internal_default_instance() {
    return reinterpret_cast<const AddTodoRequest*>(
               &_AddTodoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddTodoRequest& a, AddTodoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddTodoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddTodoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddTodoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddTodoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddTodoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddTodoRequest& from) {
    AddTodoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddTodoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "todo_list.AddTodoRequest";
  }
  protected:
  explicit AddTodoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kDescriptionFieldNumber = 3,
  };
  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:todo_list.AddTodoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_todo_5flist_2eproto;
};
// -------------------------------------------------------------------

class UpdateTodoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:todo_list.UpdateTodoRequest) */ {
 public:
  inline UpdateTodoRequest() : UpdateTodoRequest(nullptr) {}
  ~UpdateTodoRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateTodoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateTodoRequest(const UpdateTodoRequest& from);
  UpdateTodoRequest(UpdateTodoRequest&& from) noexcept
    : UpdateTodoRequest() {
    *this = ::std::move(from);
  }

  inline UpdateTodoRequest& operator=(const UpdateTodoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateTodoRequest& operator=(UpdateTodoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateTodoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateTodoRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateTodoRequest*>(
               &_UpdateTodoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdateTodoRequest& a, UpdateTodoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateTodoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateTodoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateTodoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateTodoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateTodoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateTodoRequest& from) {
    UpdateTodoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTodoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "todo_list.UpdateTodoRequest";
  }
  protected:
  explicit UpdateTodoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kDescriptionFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:todo_list.UpdateTodoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_todo_5flist_2eproto;
};
// -------------------------------------------------------------------

class GetTodoListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:todo_list.GetTodoListRequest) */ {
 public:
  inline GetTodoListRequest() : GetTodoListRequest(nullptr) {}
  ~GetTodoListRequest() override;
  explicit PROTOBUF_CONSTEXPR GetTodoListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTodoListRequest(const GetTodoListRequest& from);
  GetTodoListRequest(GetTodoListRequest&& from) noexcept
    : GetTodoListRequest() {
    *this = ::std::move(from);
  }

  inline GetTodoListRequest& operator=(const GetTodoListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTodoListRequest& operator=(GetTodoListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTodoListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTodoListRequest* internal_default_instance() {
    return reinterpret_cast<const GetTodoListRequest*>(
               &_GetTodoListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetTodoListRequest& a, GetTodoListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTodoListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTodoListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTodoListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTodoListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTodoListRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTodoListRequest& from) {
    GetTodoListRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTodoListRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "todo_list.GetTodoListRequest";
  }
  protected:
  explicit GetTodoListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:todo_list.GetTodoListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_todo_5flist_2eproto;
};
// -------------------------------------------------------------------

class TodoList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:todo_list.TodoList) */ {
 public:
  inline TodoList() : TodoList(nullptr) {}
  ~TodoList() override;
  explicit PROTOBUF_CONSTEXPR TodoList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TodoList(const TodoList& from);
  TodoList(TodoList&& from) noexcept
    : TodoList() {
    *this = ::std::move(from);
  }

  inline TodoList& operator=(const TodoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TodoList& operator=(TodoList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TodoList& default_instance() {
    return *internal_default_instance();
  }
  static inline const TodoList* internal_default_instance() {
    return reinterpret_cast<const TodoList*>(
               &_TodoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TodoList& a, TodoList& b) {
    a.Swap(&b);
  }
  inline void Swap(TodoList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TodoList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TodoList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TodoList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TodoList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TodoList& from) {
    TodoList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TodoList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "todo_list.TodoList";
  }
  protected:
  explicit TodoList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTodoItemFieldNumber = 7,
    kIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kCreatedDateFieldNumber = 4,
    kModifiedDateFieldNumber = 5,
    kVersionFieldNumber = 6,
  };
  // repeated .todo_list.TodoItem todo_item = 7;
  int todo_item_size() const;
  private:
  int _internal_todo_item_size() const;
  public:
  void clear_todo_item();
  ::todo_list::TodoItem* mutable_todo_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::todo_list::TodoItem >*
      mutable_todo_item();
  private:
  const ::todo_list::TodoItem& _internal_todo_item(int index) const;
  ::todo_list::TodoItem* _internal_add_todo_item();
  public:
  const ::todo_list::TodoItem& todo_item(int index) const;
  ::todo_list::TodoItem* add_todo_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::todo_list::TodoItem >&
      todo_item() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string created_date = 4;
  void clear_created_date();
  const std::string& created_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_created_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_created_date();
  PROTOBUF_NODISCARD std::string* release_created_date();
  void set_allocated_created_date(std::string* created_date);
  private:
  const std::string& _internal_created_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_date(const std::string& value);
  std::string* _internal_mutable_created_date();
  public:

  // string modified_date = 5;
  void clear_modified_date();
  const std::string& modified_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_modified_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_modified_date();
  PROTOBUF_NODISCARD std::string* release_modified_date();
  void set_allocated_modified_date(std::string* modified_date);
  private:
  const std::string& _internal_modified_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modified_date(const std::string& value);
  std::string* _internal_mutable_modified_date();
  public:

  // int32 version = 6;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:todo_list.TodoList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::todo_list::TodoItem > todo_item_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_date_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modified_date_;
    int32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_todo_5flist_2eproto;
};
// -------------------------------------------------------------------

class DeleteTodoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:todo_list.DeleteTodoRequest) */ {
 public:
  inline DeleteTodoRequest() : DeleteTodoRequest(nullptr) {}
  ~DeleteTodoRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteTodoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteTodoRequest(const DeleteTodoRequest& from);
  DeleteTodoRequest(DeleteTodoRequest&& from) noexcept
    : DeleteTodoRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTodoRequest& operator=(const DeleteTodoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTodoRequest& operator=(DeleteTodoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteTodoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteTodoRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTodoRequest*>(
               &_DeleteTodoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteTodoRequest& a, DeleteTodoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTodoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTodoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteTodoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteTodoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteTodoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteTodoRequest& from) {
    DeleteTodoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTodoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "todo_list.DeleteTodoRequest";
  }
  protected:
  explicit DeleteTodoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:todo_list.DeleteTodoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_todo_5flist_2eproto;
};
// -------------------------------------------------------------------

class AddTodoListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:todo_list.AddTodoListResponse) */ {
 public:
  inline AddTodoListResponse() : AddTodoListResponse(nullptr) {}
  ~AddTodoListResponse() override;
  explicit PROTOBUF_CONSTEXPR AddTodoListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddTodoListResponse(const AddTodoListResponse& from);
  AddTodoListResponse(AddTodoListResponse&& from) noexcept
    : AddTodoListResponse() {
    *this = ::std::move(from);
  }

  inline AddTodoListResponse& operator=(const AddTodoListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddTodoListResponse& operator=(AddTodoListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddTodoListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddTodoListResponse* internal_default_instance() {
    return reinterpret_cast<const AddTodoListResponse*>(
               &_AddTodoListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AddTodoListResponse& a, AddTodoListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddTodoListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddTodoListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddTodoListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddTodoListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddTodoListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddTodoListResponse& from) {
    AddTodoListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddTodoListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "todo_list.AddTodoListResponse";
  }
  protected:
  explicit AddTodoListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMessageFieldNumber = 3,
    kStatusFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 status = 2;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:todo_list.AddTodoListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_todo_5flist_2eproto;
};
// -------------------------------------------------------------------

class UpdateTodoListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:todo_list.UpdateTodoListResponse) */ {
 public:
  inline UpdateTodoListResponse() : UpdateTodoListResponse(nullptr) {}
  ~UpdateTodoListResponse() override;
  explicit PROTOBUF_CONSTEXPR UpdateTodoListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateTodoListResponse(const UpdateTodoListResponse& from);
  UpdateTodoListResponse(UpdateTodoListResponse&& from) noexcept
    : UpdateTodoListResponse() {
    *this = ::std::move(from);
  }

  inline UpdateTodoListResponse& operator=(const UpdateTodoListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateTodoListResponse& operator=(UpdateTodoListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateTodoListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateTodoListResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateTodoListResponse*>(
               &_UpdateTodoListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateTodoListResponse& a, UpdateTodoListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateTodoListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateTodoListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateTodoListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateTodoListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateTodoListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateTodoListResponse& from) {
    UpdateTodoListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTodoListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "todo_list.UpdateTodoListResponse";
  }
  protected:
  explicit UpdateTodoListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:todo_list.UpdateTodoListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_todo_5flist_2eproto;
};
// -------------------------------------------------------------------

class GetTodoListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:todo_list.GetTodoListResponse) */ {
 public:
  inline GetTodoListResponse() : GetTodoListResponse(nullptr) {}
  ~GetTodoListResponse() override;
  explicit PROTOBUF_CONSTEXPR GetTodoListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTodoListResponse(const GetTodoListResponse& from);
  GetTodoListResponse(GetTodoListResponse&& from) noexcept
    : GetTodoListResponse() {
    *this = ::std::move(from);
  }

  inline GetTodoListResponse& operator=(const GetTodoListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTodoListResponse& operator=(GetTodoListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTodoListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTodoListResponse* internal_default_instance() {
    return reinterpret_cast<const GetTodoListResponse*>(
               &_GetTodoListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetTodoListResponse& a, GetTodoListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTodoListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTodoListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTodoListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTodoListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTodoListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTodoListResponse& from) {
    GetTodoListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTodoListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "todo_list.GetTodoListResponse";
  }
  protected:
  explicit GetTodoListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kTodoListFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // optional string message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .todo_list.TodoList todo_list = 1;
  bool has_todo_list() const;
  private:
  bool _internal_has_todo_list() const;
  public:
  void clear_todo_list();
  const ::todo_list::TodoList& todo_list() const;
  PROTOBUF_NODISCARD ::todo_list::TodoList* release_todo_list();
  ::todo_list::TodoList* mutable_todo_list();
  void set_allocated_todo_list(::todo_list::TodoList* todo_list);
  private:
  const ::todo_list::TodoList& _internal_todo_list() const;
  ::todo_list::TodoList* _internal_mutable_todo_list();
  public:
  void unsafe_arena_set_allocated_todo_list(
      ::todo_list::TodoList* todo_list);
  ::todo_list::TodoList* unsafe_arena_release_todo_list();

  // int32 status = 2;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:todo_list.GetTodoListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::todo_list::TodoList* todo_list_;
    int32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_todo_5flist_2eproto;
};
// -------------------------------------------------------------------

class DeleteTodoListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:todo_list.DeleteTodoListResponse) */ {
 public:
  inline DeleteTodoListResponse() : DeleteTodoListResponse(nullptr) {}
  ~DeleteTodoListResponse() override;
  explicit PROTOBUF_CONSTEXPR DeleteTodoListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteTodoListResponse(const DeleteTodoListResponse& from);
  DeleteTodoListResponse(DeleteTodoListResponse&& from) noexcept
    : DeleteTodoListResponse() {
    *this = ::std::move(from);
  }

  inline DeleteTodoListResponse& operator=(const DeleteTodoListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTodoListResponse& operator=(DeleteTodoListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteTodoListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteTodoListResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteTodoListResponse*>(
               &_DeleteTodoListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeleteTodoListResponse& a, DeleteTodoListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTodoListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTodoListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteTodoListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteTodoListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteTodoListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteTodoListResponse& from) {
    DeleteTodoListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTodoListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "todo_list.DeleteTodoListResponse";
  }
  protected:
  explicit DeleteTodoListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:todo_list.DeleteTodoListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_todo_5flist_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TodoItem

// string id = 1;
inline void TodoItem::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& TodoItem::id() const {
  // @@protoc_insertion_point(field_get:todo_list.TodoItem.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TodoItem::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo_list.TodoItem.id)
}
inline std::string* TodoItem::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:todo_list.TodoItem.id)
  return _s;
}
inline const std::string& TodoItem::_internal_id() const {
  return _impl_.id_.Get();
}
inline void TodoItem::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* TodoItem::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* TodoItem::release_id() {
  // @@protoc_insertion_point(field_release:todo_list.TodoItem.id)
  return _impl_.id_.Release();
}
inline void TodoItem::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo_list.TodoItem.id)
}

// string title = 2;
inline void TodoItem::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& TodoItem::title() const {
  // @@protoc_insertion_point(field_get:todo_list.TodoItem.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TodoItem::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo_list.TodoItem.title)
}
inline std::string* TodoItem::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:todo_list.TodoItem.title)
  return _s;
}
inline const std::string& TodoItem::_internal_title() const {
  return _impl_.title_.Get();
}
inline void TodoItem::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* TodoItem::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* TodoItem::release_title() {
  // @@protoc_insertion_point(field_release:todo_list.TodoItem.title)
  return _impl_.title_.Release();
}
inline void TodoItem::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo_list.TodoItem.title)
}

// string note = 3;
inline void TodoItem::clear_note() {
  _impl_.note_.ClearToEmpty();
}
inline const std::string& TodoItem::note() const {
  // @@protoc_insertion_point(field_get:todo_list.TodoItem.note)
  return _internal_note();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TodoItem::set_note(ArgT0&& arg0, ArgT... args) {
 
 _impl_.note_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo_list.TodoItem.note)
}
inline std::string* TodoItem::mutable_note() {
  std::string* _s = _internal_mutable_note();
  // @@protoc_insertion_point(field_mutable:todo_list.TodoItem.note)
  return _s;
}
inline const std::string& TodoItem::_internal_note() const {
  return _impl_.note_.Get();
}
inline void TodoItem::_internal_set_note(const std::string& value) {
  
  _impl_.note_.Set(value, GetArenaForAllocation());
}
inline std::string* TodoItem::_internal_mutable_note() {
  
  return _impl_.note_.Mutable(GetArenaForAllocation());
}
inline std::string* TodoItem::release_note() {
  // @@protoc_insertion_point(field_release:todo_list.TodoItem.note)
  return _impl_.note_.Release();
}
inline void TodoItem::set_allocated_note(std::string* note) {
  if (note != nullptr) {
    
  } else {
    
  }
  _impl_.note_.SetAllocated(note, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.note_.IsDefault()) {
    _impl_.note_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo_list.TodoItem.note)
}

// string todo_list_id = 4;
inline void TodoItem::clear_todo_list_id() {
  _impl_.todo_list_id_.ClearToEmpty();
}
inline const std::string& TodoItem::todo_list_id() const {
  // @@protoc_insertion_point(field_get:todo_list.TodoItem.todo_list_id)
  return _internal_todo_list_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TodoItem::set_todo_list_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.todo_list_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo_list.TodoItem.todo_list_id)
}
inline std::string* TodoItem::mutable_todo_list_id() {
  std::string* _s = _internal_mutable_todo_list_id();
  // @@protoc_insertion_point(field_mutable:todo_list.TodoItem.todo_list_id)
  return _s;
}
inline const std::string& TodoItem::_internal_todo_list_id() const {
  return _impl_.todo_list_id_.Get();
}
inline void TodoItem::_internal_set_todo_list_id(const std::string& value) {
  
  _impl_.todo_list_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TodoItem::_internal_mutable_todo_list_id() {
  
  return _impl_.todo_list_id_.Mutable(GetArenaForAllocation());
}
inline std::string* TodoItem::release_todo_list_id() {
  // @@protoc_insertion_point(field_release:todo_list.TodoItem.todo_list_id)
  return _impl_.todo_list_id_.Release();
}
inline void TodoItem::set_allocated_todo_list_id(std::string* todo_list_id) {
  if (todo_list_id != nullptr) {
    
  } else {
    
  }
  _impl_.todo_list_id_.SetAllocated(todo_list_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.todo_list_id_.IsDefault()) {
    _impl_.todo_list_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo_list.TodoItem.todo_list_id)
}

// bool completed = 5;
inline void TodoItem::clear_completed() {
  _impl_.completed_ = false;
}
inline bool TodoItem::_internal_completed() const {
  return _impl_.completed_;
}
inline bool TodoItem::completed() const {
  // @@protoc_insertion_point(field_get:todo_list.TodoItem.completed)
  return _internal_completed();
}
inline void TodoItem::_internal_set_completed(bool value) {
  
  _impl_.completed_ = value;
}
inline void TodoItem::set_completed(bool value) {
  _internal_set_completed(value);
  // @@protoc_insertion_point(field_set:todo_list.TodoItem.completed)
}

// string created_date = 6;
inline void TodoItem::clear_created_date() {
  _impl_.created_date_.ClearToEmpty();
}
inline const std::string& TodoItem::created_date() const {
  // @@protoc_insertion_point(field_get:todo_list.TodoItem.created_date)
  return _internal_created_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TodoItem::set_created_date(ArgT0&& arg0, ArgT... args) {
 
 _impl_.created_date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo_list.TodoItem.created_date)
}
inline std::string* TodoItem::mutable_created_date() {
  std::string* _s = _internal_mutable_created_date();
  // @@protoc_insertion_point(field_mutable:todo_list.TodoItem.created_date)
  return _s;
}
inline const std::string& TodoItem::_internal_created_date() const {
  return _impl_.created_date_.Get();
}
inline void TodoItem::_internal_set_created_date(const std::string& value) {
  
  _impl_.created_date_.Set(value, GetArenaForAllocation());
}
inline std::string* TodoItem::_internal_mutable_created_date() {
  
  return _impl_.created_date_.Mutable(GetArenaForAllocation());
}
inline std::string* TodoItem::release_created_date() {
  // @@protoc_insertion_point(field_release:todo_list.TodoItem.created_date)
  return _impl_.created_date_.Release();
}
inline void TodoItem::set_allocated_created_date(std::string* created_date) {
  if (created_date != nullptr) {
    
  } else {
    
  }
  _impl_.created_date_.SetAllocated(created_date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.created_date_.IsDefault()) {
    _impl_.created_date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo_list.TodoItem.created_date)
}

// string modified_date = 7;
inline void TodoItem::clear_modified_date() {
  _impl_.modified_date_.ClearToEmpty();
}
inline const std::string& TodoItem::modified_date() const {
  // @@protoc_insertion_point(field_get:todo_list.TodoItem.modified_date)
  return _internal_modified_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TodoItem::set_modified_date(ArgT0&& arg0, ArgT... args) {
 
 _impl_.modified_date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo_list.TodoItem.modified_date)
}
inline std::string* TodoItem::mutable_modified_date() {
  std::string* _s = _internal_mutable_modified_date();
  // @@protoc_insertion_point(field_mutable:todo_list.TodoItem.modified_date)
  return _s;
}
inline const std::string& TodoItem::_internal_modified_date() const {
  return _impl_.modified_date_.Get();
}
inline void TodoItem::_internal_set_modified_date(const std::string& value) {
  
  _impl_.modified_date_.Set(value, GetArenaForAllocation());
}
inline std::string* TodoItem::_internal_mutable_modified_date() {
  
  return _impl_.modified_date_.Mutable(GetArenaForAllocation());
}
inline std::string* TodoItem::release_modified_date() {
  // @@protoc_insertion_point(field_release:todo_list.TodoItem.modified_date)
  return _impl_.modified_date_.Release();
}
inline void TodoItem::set_allocated_modified_date(std::string* modified_date) {
  if (modified_date != nullptr) {
    
  } else {
    
  }
  _impl_.modified_date_.SetAllocated(modified_date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.modified_date_.IsDefault()) {
    _impl_.modified_date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo_list.TodoItem.modified_date)
}

// int32 version = 8;
inline void TodoItem::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t TodoItem::_internal_version() const {
  return _impl_.version_;
}
inline int32_t TodoItem::version() const {
  // @@protoc_insertion_point(field_get:todo_list.TodoItem.version)
  return _internal_version();
}
inline void TodoItem::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void TodoItem::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:todo_list.TodoItem.version)
}

// -------------------------------------------------------------------

// AddTodoRequest

// string title = 2;
inline void AddTodoRequest::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& AddTodoRequest::title() const {
  // @@protoc_insertion_point(field_get:todo_list.AddTodoRequest.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddTodoRequest::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo_list.AddTodoRequest.title)
}
inline std::string* AddTodoRequest::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:todo_list.AddTodoRequest.title)
  return _s;
}
inline const std::string& AddTodoRequest::_internal_title() const {
  return _impl_.title_.Get();
}
inline void AddTodoRequest::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* AddTodoRequest::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* AddTodoRequest::release_title() {
  // @@protoc_insertion_point(field_release:todo_list.AddTodoRequest.title)
  return _impl_.title_.Release();
}
inline void AddTodoRequest::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo_list.AddTodoRequest.title)
}

// string description = 3;
inline void AddTodoRequest::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& AddTodoRequest::description() const {
  // @@protoc_insertion_point(field_get:todo_list.AddTodoRequest.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddTodoRequest::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo_list.AddTodoRequest.description)
}
inline std::string* AddTodoRequest::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:todo_list.AddTodoRequest.description)
  return _s;
}
inline const std::string& AddTodoRequest::_internal_description() const {
  return _impl_.description_.Get();
}
inline void AddTodoRequest::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* AddTodoRequest::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* AddTodoRequest::release_description() {
  // @@protoc_insertion_point(field_release:todo_list.AddTodoRequest.description)
  return _impl_.description_.Release();
}
inline void AddTodoRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo_list.AddTodoRequest.description)
}

// -------------------------------------------------------------------

// UpdateTodoRequest

// string id = 1;
inline void UpdateTodoRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UpdateTodoRequest::id() const {
  // @@protoc_insertion_point(field_get:todo_list.UpdateTodoRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateTodoRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo_list.UpdateTodoRequest.id)
}
inline std::string* UpdateTodoRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:todo_list.UpdateTodoRequest.id)
  return _s;
}
inline const std::string& UpdateTodoRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void UpdateTodoRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateTodoRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateTodoRequest::release_id() {
  // @@protoc_insertion_point(field_release:todo_list.UpdateTodoRequest.id)
  return _impl_.id_.Release();
}
inline void UpdateTodoRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo_list.UpdateTodoRequest.id)
}

// string title = 2;
inline void UpdateTodoRequest::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& UpdateTodoRequest::title() const {
  // @@protoc_insertion_point(field_get:todo_list.UpdateTodoRequest.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateTodoRequest::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo_list.UpdateTodoRequest.title)
}
inline std::string* UpdateTodoRequest::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:todo_list.UpdateTodoRequest.title)
  return _s;
}
inline const std::string& UpdateTodoRequest::_internal_title() const {
  return _impl_.title_.Get();
}
inline void UpdateTodoRequest::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateTodoRequest::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateTodoRequest::release_title() {
  // @@protoc_insertion_point(field_release:todo_list.UpdateTodoRequest.title)
  return _impl_.title_.Release();
}
inline void UpdateTodoRequest::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo_list.UpdateTodoRequest.title)
}

// string description = 3;
inline void UpdateTodoRequest::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& UpdateTodoRequest::description() const {
  // @@protoc_insertion_point(field_get:todo_list.UpdateTodoRequest.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateTodoRequest::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo_list.UpdateTodoRequest.description)
}
inline std::string* UpdateTodoRequest::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:todo_list.UpdateTodoRequest.description)
  return _s;
}
inline const std::string& UpdateTodoRequest::_internal_description() const {
  return _impl_.description_.Get();
}
inline void UpdateTodoRequest::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateTodoRequest::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateTodoRequest::release_description() {
  // @@protoc_insertion_point(field_release:todo_list.UpdateTodoRequest.description)
  return _impl_.description_.Release();
}
inline void UpdateTodoRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo_list.UpdateTodoRequest.description)
}

// -------------------------------------------------------------------

// GetTodoListRequest

// string id = 1;
inline void GetTodoListRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& GetTodoListRequest::id() const {
  // @@protoc_insertion_point(field_get:todo_list.GetTodoListRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTodoListRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo_list.GetTodoListRequest.id)
}
inline std::string* GetTodoListRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:todo_list.GetTodoListRequest.id)
  return _s;
}
inline const std::string& GetTodoListRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void GetTodoListRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTodoListRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTodoListRequest::release_id() {
  // @@protoc_insertion_point(field_release:todo_list.GetTodoListRequest.id)
  return _impl_.id_.Release();
}
inline void GetTodoListRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo_list.GetTodoListRequest.id)
}

// -------------------------------------------------------------------

// TodoList

// string id = 1;
inline void TodoList::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& TodoList::id() const {
  // @@protoc_insertion_point(field_get:todo_list.TodoList.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TodoList::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo_list.TodoList.id)
}
inline std::string* TodoList::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:todo_list.TodoList.id)
  return _s;
}
inline const std::string& TodoList::_internal_id() const {
  return _impl_.id_.Get();
}
inline void TodoList::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* TodoList::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* TodoList::release_id() {
  // @@protoc_insertion_point(field_release:todo_list.TodoList.id)
  return _impl_.id_.Release();
}
inline void TodoList::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo_list.TodoList.id)
}

// string title = 2;
inline void TodoList::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& TodoList::title() const {
  // @@protoc_insertion_point(field_get:todo_list.TodoList.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TodoList::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo_list.TodoList.title)
}
inline std::string* TodoList::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:todo_list.TodoList.title)
  return _s;
}
inline const std::string& TodoList::_internal_title() const {
  return _impl_.title_.Get();
}
inline void TodoList::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* TodoList::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* TodoList::release_title() {
  // @@protoc_insertion_point(field_release:todo_list.TodoList.title)
  return _impl_.title_.Release();
}
inline void TodoList::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo_list.TodoList.title)
}

// string description = 3;
inline void TodoList::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& TodoList::description() const {
  // @@protoc_insertion_point(field_get:todo_list.TodoList.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TodoList::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo_list.TodoList.description)
}
inline std::string* TodoList::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:todo_list.TodoList.description)
  return _s;
}
inline const std::string& TodoList::_internal_description() const {
  return _impl_.description_.Get();
}
inline void TodoList::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* TodoList::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* TodoList::release_description() {
  // @@protoc_insertion_point(field_release:todo_list.TodoList.description)
  return _impl_.description_.Release();
}
inline void TodoList::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo_list.TodoList.description)
}

// string created_date = 4;
inline void TodoList::clear_created_date() {
  _impl_.created_date_.ClearToEmpty();
}
inline const std::string& TodoList::created_date() const {
  // @@protoc_insertion_point(field_get:todo_list.TodoList.created_date)
  return _internal_created_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TodoList::set_created_date(ArgT0&& arg0, ArgT... args) {
 
 _impl_.created_date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo_list.TodoList.created_date)
}
inline std::string* TodoList::mutable_created_date() {
  std::string* _s = _internal_mutable_created_date();
  // @@protoc_insertion_point(field_mutable:todo_list.TodoList.created_date)
  return _s;
}
inline const std::string& TodoList::_internal_created_date() const {
  return _impl_.created_date_.Get();
}
inline void TodoList::_internal_set_created_date(const std::string& value) {
  
  _impl_.created_date_.Set(value, GetArenaForAllocation());
}
inline std::string* TodoList::_internal_mutable_created_date() {
  
  return _impl_.created_date_.Mutable(GetArenaForAllocation());
}
inline std::string* TodoList::release_created_date() {
  // @@protoc_insertion_point(field_release:todo_list.TodoList.created_date)
  return _impl_.created_date_.Release();
}
inline void TodoList::set_allocated_created_date(std::string* created_date) {
  if (created_date != nullptr) {
    
  } else {
    
  }
  _impl_.created_date_.SetAllocated(created_date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.created_date_.IsDefault()) {
    _impl_.created_date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo_list.TodoList.created_date)
}

// string modified_date = 5;
inline void TodoList::clear_modified_date() {
  _impl_.modified_date_.ClearToEmpty();
}
inline const std::string& TodoList::modified_date() const {
  // @@protoc_insertion_point(field_get:todo_list.TodoList.modified_date)
  return _internal_modified_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TodoList::set_modified_date(ArgT0&& arg0, ArgT... args) {
 
 _impl_.modified_date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo_list.TodoList.modified_date)
}
inline std::string* TodoList::mutable_modified_date() {
  std::string* _s = _internal_mutable_modified_date();
  // @@protoc_insertion_point(field_mutable:todo_list.TodoList.modified_date)
  return _s;
}
inline const std::string& TodoList::_internal_modified_date() const {
  return _impl_.modified_date_.Get();
}
inline void TodoList::_internal_set_modified_date(const std::string& value) {
  
  _impl_.modified_date_.Set(value, GetArenaForAllocation());
}
inline std::string* TodoList::_internal_mutable_modified_date() {
  
  return _impl_.modified_date_.Mutable(GetArenaForAllocation());
}
inline std::string* TodoList::release_modified_date() {
  // @@protoc_insertion_point(field_release:todo_list.TodoList.modified_date)
  return _impl_.modified_date_.Release();
}
inline void TodoList::set_allocated_modified_date(std::string* modified_date) {
  if (modified_date != nullptr) {
    
  } else {
    
  }
  _impl_.modified_date_.SetAllocated(modified_date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.modified_date_.IsDefault()) {
    _impl_.modified_date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo_list.TodoList.modified_date)
}

// int32 version = 6;
inline void TodoList::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t TodoList::_internal_version() const {
  return _impl_.version_;
}
inline int32_t TodoList::version() const {
  // @@protoc_insertion_point(field_get:todo_list.TodoList.version)
  return _internal_version();
}
inline void TodoList::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void TodoList::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:todo_list.TodoList.version)
}

// repeated .todo_list.TodoItem todo_item = 7;
inline int TodoList::_internal_todo_item_size() const {
  return _impl_.todo_item_.size();
}
inline int TodoList::todo_item_size() const {
  return _internal_todo_item_size();
}
inline void TodoList::clear_todo_item() {
  _impl_.todo_item_.Clear();
}
inline ::todo_list::TodoItem* TodoList::mutable_todo_item(int index) {
  // @@protoc_insertion_point(field_mutable:todo_list.TodoList.todo_item)
  return _impl_.todo_item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::todo_list::TodoItem >*
TodoList::mutable_todo_item() {
  // @@protoc_insertion_point(field_mutable_list:todo_list.TodoList.todo_item)
  return &_impl_.todo_item_;
}
inline const ::todo_list::TodoItem& TodoList::_internal_todo_item(int index) const {
  return _impl_.todo_item_.Get(index);
}
inline const ::todo_list::TodoItem& TodoList::todo_item(int index) const {
  // @@protoc_insertion_point(field_get:todo_list.TodoList.todo_item)
  return _internal_todo_item(index);
}
inline ::todo_list::TodoItem* TodoList::_internal_add_todo_item() {
  return _impl_.todo_item_.Add();
}
inline ::todo_list::TodoItem* TodoList::add_todo_item() {
  ::todo_list::TodoItem* _add = _internal_add_todo_item();
  // @@protoc_insertion_point(field_add:todo_list.TodoList.todo_item)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::todo_list::TodoItem >&
TodoList::todo_item() const {
  // @@protoc_insertion_point(field_list:todo_list.TodoList.todo_item)
  return _impl_.todo_item_;
}

// -------------------------------------------------------------------

// DeleteTodoRequest

// string id = 1;
inline void DeleteTodoRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& DeleteTodoRequest::id() const {
  // @@protoc_insertion_point(field_get:todo_list.DeleteTodoRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteTodoRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo_list.DeleteTodoRequest.id)
}
inline std::string* DeleteTodoRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:todo_list.DeleteTodoRequest.id)
  return _s;
}
inline const std::string& DeleteTodoRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void DeleteTodoRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteTodoRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteTodoRequest::release_id() {
  // @@protoc_insertion_point(field_release:todo_list.DeleteTodoRequest.id)
  return _impl_.id_.Release();
}
inline void DeleteTodoRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo_list.DeleteTodoRequest.id)
}

// -------------------------------------------------------------------

// AddTodoListResponse

// string id = 1;
inline void AddTodoListResponse::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& AddTodoListResponse::id() const {
  // @@protoc_insertion_point(field_get:todo_list.AddTodoListResponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddTodoListResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo_list.AddTodoListResponse.id)
}
inline std::string* AddTodoListResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:todo_list.AddTodoListResponse.id)
  return _s;
}
inline const std::string& AddTodoListResponse::_internal_id() const {
  return _impl_.id_.Get();
}
inline void AddTodoListResponse::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* AddTodoListResponse::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* AddTodoListResponse::release_id() {
  // @@protoc_insertion_point(field_release:todo_list.AddTodoListResponse.id)
  return _impl_.id_.Release();
}
inline void AddTodoListResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo_list.AddTodoListResponse.id)
}

// int32 status = 2;
inline void AddTodoListResponse::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t AddTodoListResponse::_internal_status() const {
  return _impl_.status_;
}
inline int32_t AddTodoListResponse::status() const {
  // @@protoc_insertion_point(field_get:todo_list.AddTodoListResponse.status)
  return _internal_status();
}
inline void AddTodoListResponse::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void AddTodoListResponse::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:todo_list.AddTodoListResponse.status)
}

// optional string message = 3;
inline bool AddTodoListResponse::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AddTodoListResponse::has_message() const {
  return _internal_has_message();
}
inline void AddTodoListResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AddTodoListResponse::message() const {
  // @@protoc_insertion_point(field_get:todo_list.AddTodoListResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddTodoListResponse::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo_list.AddTodoListResponse.message)
}
inline std::string* AddTodoListResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:todo_list.AddTodoListResponse.message)
  return _s;
}
inline const std::string& AddTodoListResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void AddTodoListResponse::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* AddTodoListResponse::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* AddTodoListResponse::release_message() {
  // @@protoc_insertion_point(field_release:todo_list.AddTodoListResponse.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AddTodoListResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo_list.AddTodoListResponse.message)
}

// -------------------------------------------------------------------

// UpdateTodoListResponse

// int32 status = 1;
inline void UpdateTodoListResponse::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t UpdateTodoListResponse::_internal_status() const {
  return _impl_.status_;
}
inline int32_t UpdateTodoListResponse::status() const {
  // @@protoc_insertion_point(field_get:todo_list.UpdateTodoListResponse.status)
  return _internal_status();
}
inline void UpdateTodoListResponse::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void UpdateTodoListResponse::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:todo_list.UpdateTodoListResponse.status)
}

// optional string message = 2;
inline bool UpdateTodoListResponse::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UpdateTodoListResponse::has_message() const {
  return _internal_has_message();
}
inline void UpdateTodoListResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UpdateTodoListResponse::message() const {
  // @@protoc_insertion_point(field_get:todo_list.UpdateTodoListResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateTodoListResponse::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo_list.UpdateTodoListResponse.message)
}
inline std::string* UpdateTodoListResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:todo_list.UpdateTodoListResponse.message)
  return _s;
}
inline const std::string& UpdateTodoListResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void UpdateTodoListResponse::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateTodoListResponse::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateTodoListResponse::release_message() {
  // @@protoc_insertion_point(field_release:todo_list.UpdateTodoListResponse.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UpdateTodoListResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo_list.UpdateTodoListResponse.message)
}

// -------------------------------------------------------------------

// GetTodoListResponse

// .todo_list.TodoList todo_list = 1;
inline bool GetTodoListResponse::_internal_has_todo_list() const {
  return this != internal_default_instance() && _impl_.todo_list_ != nullptr;
}
inline bool GetTodoListResponse::has_todo_list() const {
  return _internal_has_todo_list();
}
inline void GetTodoListResponse::clear_todo_list() {
  if (GetArenaForAllocation() == nullptr && _impl_.todo_list_ != nullptr) {
    delete _impl_.todo_list_;
  }
  _impl_.todo_list_ = nullptr;
}
inline const ::todo_list::TodoList& GetTodoListResponse::_internal_todo_list() const {
  const ::todo_list::TodoList* p = _impl_.todo_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::todo_list::TodoList&>(
      ::todo_list::_TodoList_default_instance_);
}
inline const ::todo_list::TodoList& GetTodoListResponse::todo_list() const {
  // @@protoc_insertion_point(field_get:todo_list.GetTodoListResponse.todo_list)
  return _internal_todo_list();
}
inline void GetTodoListResponse::unsafe_arena_set_allocated_todo_list(
    ::todo_list::TodoList* todo_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.todo_list_);
  }
  _impl_.todo_list_ = todo_list;
  if (todo_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:todo_list.GetTodoListResponse.todo_list)
}
inline ::todo_list::TodoList* GetTodoListResponse::release_todo_list() {
  
  ::todo_list::TodoList* temp = _impl_.todo_list_;
  _impl_.todo_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::todo_list::TodoList* GetTodoListResponse::unsafe_arena_release_todo_list() {
  // @@protoc_insertion_point(field_release:todo_list.GetTodoListResponse.todo_list)
  
  ::todo_list::TodoList* temp = _impl_.todo_list_;
  _impl_.todo_list_ = nullptr;
  return temp;
}
inline ::todo_list::TodoList* GetTodoListResponse::_internal_mutable_todo_list() {
  
  if (_impl_.todo_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::todo_list::TodoList>(GetArenaForAllocation());
    _impl_.todo_list_ = p;
  }
  return _impl_.todo_list_;
}
inline ::todo_list::TodoList* GetTodoListResponse::mutable_todo_list() {
  ::todo_list::TodoList* _msg = _internal_mutable_todo_list();
  // @@protoc_insertion_point(field_mutable:todo_list.GetTodoListResponse.todo_list)
  return _msg;
}
inline void GetTodoListResponse::set_allocated_todo_list(::todo_list::TodoList* todo_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.todo_list_;
  }
  if (todo_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(todo_list);
    if (message_arena != submessage_arena) {
      todo_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, todo_list, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.todo_list_ = todo_list;
  // @@protoc_insertion_point(field_set_allocated:todo_list.GetTodoListResponse.todo_list)
}

// int32 status = 2;
inline void GetTodoListResponse::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t GetTodoListResponse::_internal_status() const {
  return _impl_.status_;
}
inline int32_t GetTodoListResponse::status() const {
  // @@protoc_insertion_point(field_get:todo_list.GetTodoListResponse.status)
  return _internal_status();
}
inline void GetTodoListResponse::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void GetTodoListResponse::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:todo_list.GetTodoListResponse.status)
}

// optional string message = 3;
inline bool GetTodoListResponse::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetTodoListResponse::has_message() const {
  return _internal_has_message();
}
inline void GetTodoListResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetTodoListResponse::message() const {
  // @@protoc_insertion_point(field_get:todo_list.GetTodoListResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTodoListResponse::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo_list.GetTodoListResponse.message)
}
inline std::string* GetTodoListResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:todo_list.GetTodoListResponse.message)
  return _s;
}
inline const std::string& GetTodoListResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void GetTodoListResponse::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTodoListResponse::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTodoListResponse::release_message() {
  // @@protoc_insertion_point(field_release:todo_list.GetTodoListResponse.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetTodoListResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo_list.GetTodoListResponse.message)
}

// -------------------------------------------------------------------

// DeleteTodoListResponse

// int32 status = 1;
inline void DeleteTodoListResponse::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t DeleteTodoListResponse::_internal_status() const {
  return _impl_.status_;
}
inline int32_t DeleteTodoListResponse::status() const {
  // @@protoc_insertion_point(field_get:todo_list.DeleteTodoListResponse.status)
  return _internal_status();
}
inline void DeleteTodoListResponse::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void DeleteTodoListResponse::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:todo_list.DeleteTodoListResponse.status)
}

// optional string message = 2;
inline bool DeleteTodoListResponse::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeleteTodoListResponse::has_message() const {
  return _internal_has_message();
}
inline void DeleteTodoListResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeleteTodoListResponse::message() const {
  // @@protoc_insertion_point(field_get:todo_list.DeleteTodoListResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteTodoListResponse::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo_list.DeleteTodoListResponse.message)
}
inline std::string* DeleteTodoListResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:todo_list.DeleteTodoListResponse.message)
  return _s;
}
inline const std::string& DeleteTodoListResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void DeleteTodoListResponse::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteTodoListResponse::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteTodoListResponse::release_message() {
  // @@protoc_insertion_point(field_release:todo_list.DeleteTodoListResponse.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DeleteTodoListResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo_list.DeleteTodoListResponse.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace todo_list

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_todo_5flist_2eproto
